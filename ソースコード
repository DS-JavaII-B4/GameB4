import java.io.BufferedReader;
import java.io.InputStreamReader;

class Monster{
	final static int UPPER_LIMIT=1000;//能力の上限
	final static int LOWER_LIMIT=0;//能力の下限
	int life, power, speed, toughness;//各能力
	final static String[] TYPE= {"fire","water","nature","normal"};//4つの属性

	Monster(int life, int power, int speed, int toughness) throws Exception {
		SetAbility(life, power, speed, toughness);
	}
	/*各能力を設定*/
	void SetAbility(int life,int power,int speed,int toughness) throws Exception{
		if((UPPER_LIMIT<life||life<LOWER_LIMIT)||(UPPER_LIMIT<power||LOWER_LIMIT>power)
			||(UPPER_LIMIT<speed||LOWER_LIMIT>speed)||(UPPER_LIMIT<toughness||LOWER_LIMIT>toughness)) {
			throw new Exception();
			}
		this.life = life;
		this.power=power;
		this.speed=speed;
		this.toughness=toughness;
		}
	}
/*自分のモンスター*/
class Character extends Monster{
	String name;//名前
	String type;//属性
	static String[] skill = {"強攻撃","弱攻撃","スキルアップ","スキルダウン"};//技
	double[] skillPoint = {0.3,0.1};//攻撃力にかかる倍率
	final static String[] TYPE= {"fire","water","nature","normal"};//4つの属性
	final static String DEAFAULT_TIPE = "normal";
	Character(String name, String type, int life, int power, int speed, int toughness) throws Exception{
		super(life, power, speed, toughness);
		this.name=name;
		this.type=type;
	}

}
/*敵のモンスター*/
class Enemy extends Monster{
	String type;
	static String[] skill = {"強攻撃","弱攻撃","スキルアップ","スキルダウン"};//技
	double[] skillPoint = {0.3,0.1};
	Enemy(int life, int power, int speed, int toughness) throws Exception{
 		super(250,250,250,250);
 		type="water"/*YPE[1]*/;
		}
	}

class AttackC{
	static void LifeAttack(Character m1, Enemy m2, int n){
		System.out.println(m1.name+"は敵に攻撃した");
		if(((m1.type == "fire") && (m2.type == "nature")) 
				|| ((m1.type == "nature") && (m2.type == "water"))
				|| ((m1.type == "water") && (m2.type == "fire"))) {
			m2.life = m2.life - (int)((double)(m1.power)*m1.skillPoint[n])*2;
			System.out.println("効果はバツグンだ!");
		} else if(((m1.type == "nature") && (m2.type == "fire")) 
				|| ((m1.type == "water") && (m2.type == "nature"))
				|| ((m1.type == "fire") && (m2.type == "water"))){
			m2.life = m2.life - (int)((double)(m1.power)*m1.skillPoint[n])/2;
			System.out.println("効果はいまひとつだ。");
		} else {
			m2.life = m2.life - (int)((double)(m1.power)*m1.skillPoint[n]);
		}
	}
	static void AbilityUp(Character m1, int n){
		if(n==0){
		m1.power = m1.power + 5;
		System.out.println(m1.name+"のパワーが上昇した！");
		} else if(n==1){
		m1.speed = m1.speed +5;
		System.out.println(m1.name+"のスピードが上昇した！");
		} else if(n==2){
		m1.toughness = m1.toughness + 5;
		System.out.println(m1.name+"の防御力が上昇した！");
		}
	}
	static void AbilityDown(Enemy m1, int n){
		if(n==0){
			m1.power = m1.power - 5;
			System.out.println("敵のパワーがダウンした");
		} else if(n==1){
			m1.speed = m1.speed - 5;
			System.out.println("敵のスピードがダウンした");
		} else if(n==2){
			m1.toughness = m1.toughness - 5;
			System.out.println("敵の防御力がダウンした");
		}

	}
}
class AttackE{
	static void LifeAttack(Enemy m1,Character m2, int n){
		System.out.println("敵は"+m2.name+"に攻撃した");
		if(((m1.type == "fire") && (m2.type == "nature")) 
				|| ((m1.type == "nature") && (m2.type == "water"))
				|| ((m1.type == "water") && (m2.type == "fire"))) {
			m2.life = m2.life - (int)((double)(m1.power)*m1.skillPoint[n])*2;
			System.out.println("効果はバツグンだ!");
		} else if(((m1.type == "nature") && (m2.type == "fire")) 
				|| ((m1.type == "water") && (m2.type == "nature"))
				|| ((m1.type == "fire") && (m2.type == "water"))){
			m2.life = m2.life - (int)((double)(m1.power)*m1.skillPoint[n])/2;
			System.out.println("効果はいまひとつだ。");
		} else {
			m2.life = m2.life - (int)((double)(m1.power)*m1.skillPoint[n]);
		}
	}

	static void AbilityUp(Enemy m1, int n){
		if(n==0){
			m1.power = m1.power + 5;
			System.out.println("敵のパワーが上昇した！");
			} else if(n==1){
			m1.speed = m1.speed +5;
			System.out.println("敵のスピードが上昇した！");
			} else if(n==2){
			m1.toughness = m1.toughness + 5;
			System.out.println("敵の防御力が上昇した！");
			}
		}
	static void AbilityDown(Character m1, int n){
		if(n==0){
			m1.power = m1.power - 5;
			System.out.println(m1.name+"のパワーがダウンした");
		} else if(n==1){
			m1.speed = m1.speed - 5;
			System.out.println(m1.name+"のスピードがダウンした");
		} else if(n==2){
			m1.toughness = m1.toughness - 5;
			System.out.println(m1.name+"の防御力がダウンした");
		}

	}
}

public class MonsterBattle {
	public static void main (String[] args) {
		try {
			System.out.println("はじめにモンスターを作ってもらいます");
			System.out.println("まず名前を入力してください");
			BufferedReader reader1 = new BufferedReader(new InputStreamReader(System.in));
			String name=reader1.readLine();
			System.out.println("モンスターの名前は"+name+"ですね");
			System.out.println("次にモンスターのタイプを選んでもらいます");
			System.out.println("fire,water,nature,normalから一つ選んで入力してください");
			BufferedReader reader2 = new BufferedReader(new InputStreamReader(System.in));
			String type=reader2.readLine();
			System.out.println("モンスターのタイプは"+type+"ですね");
			System.out.println("モンスターを作るのに1000ポイント最初に与えられます");
			System.out.println("体力、攻撃力、素早さ、防御力それぞれにポイントを割り振ってオリジナルのモンスターを作ってください");
			System.out.println("まず体力は幾つにしますか？整数で入力してください");
			BufferedReader reader3 = new BufferedReader(new InputStreamReader(System.in));
			String line1 =reader3.readLine();
			int life=Integer.parseInt(line1);
			int point1=1000-life;
			System.out.println("体力:"+life+"  残りポイント:"+point1);
			System.out.println("次に攻撃力を決めてください。同じく整数で入力してください");
			BufferedReader reader4 = new BufferedReader(new InputStreamReader(System.in));
			String line2=reader4.readLine();
			int power=Integer.parseInt(line2);
			int point2=1000-(life+power);
			System.out.println("体力:"+life+"攻撃力:"+power+"  残りポイント:"+point2);
			System.out.println("次に素早さを決めてください。同じく整数で入力してください");
			BufferedReader reader5 = new BufferedReader(new InputStreamReader(System.in));
			String line3=reader5.readLine();
			int speed=Integer.parseInt(line3);
			int point3=1000-(life+power+speed);
			System.out.println("体力:"+life+"攻撃力:"+power+"素早さ:"+speed+"  残りポイント:"+point3);
			System.out.println("次に防御力を決めてください。同じく整数で入力してください");
			BufferedReader reader6 = new BufferedReader(new InputStreamReader(System.in));
			String line4=reader6.readLine();
			int toughness=Integer.parseInt(line4);
			Character ch1 = new Character(name,"fire",life,power,speed,toughness);
			System.out.println("タイプ:"+ch1.type+"体力:"+ch1.life+"攻撃力:"+ch1.power+
					"素早さ:"+ch1.speed+"防御力:"+ch1.toughness);
			System.out.println("モンスターは四つの技を持ちます");
			System.out.println("四つの技を一つずつ選んでモンスターと戦います");
			System.out.print("モンスターが持つ技は ");
			for(int i=0;i<Character.skill.length;i++) {
				System.out.print(Character.skill[i]+" ");
			}System.out.println("です");
			System.out.println("このモンスターでバトルを開始します");
			System.out.println();
			
			Enemy e1 = new Enemy(250,250,250,250);
			System.out.println("敵のステータスは以下の通りです");
			System.out.println("タイプ:"+e1.type+"体力:"+e1.life+"攻撃力:"+e1.power+
					"素早さ:"+e1.speed+"防御力:"+e1.toughness);
			while((ch1.life>Monster.LOWER_LIMIT)&&(e1.life>Monster.LOWER_LIMIT)){
				System.out.println("技を選んでください");
				for(int i=0;i<Character.skill.length;i++) {
					System.out.println(i+":"+Character.skill[i]);
				}System.out.println("番号で選んでください");
				BufferedReader reader7 = new BufferedReader(new InputStreamReader(System.in));
				String sline=reader7.readLine();
				int skill=Integer.parseInt(sline);
				if(ch1.speed>e1.speed) {
					System.out.println(ch1.name+"は"+Character.skill[skill]+"を使った！");
					switch(skill) {
					case 0:
						AttackC.LifeAttack(ch1,e1,0);
						break;
					case 1:
						AttackC.LifeAttack(ch1,e1,1);
						break;
					case 2:
						int num =(int)(Math.random()*2);
						AttackC.AbilityUp(ch1,num);
						break;
					case 3:
						int num2 =(int)(Math.random()*2);
						AttackC.AbilityDown(e1,num2);
						break;
					}
					int eskill=(int)(Math.random()*4);
					System.out.println("敵は"+Enemy.skill[eskill]+"を使った！");
					switch(eskill) {
					case 0:
						AttackE.LifeAttack(e1,ch1,0);
						break;
					case 1:
						AttackE.LifeAttack(e1,ch1,1);
						break;
					case 2:
						int num =(int)(Math.random()*2);
						AttackE.AbilityUp(e1,num);
						break;
					case 3:
						int num2 =(int)(Math.random()*2);
						AttackE.AbilityDown(ch1,num2);
						break;
					}
					
				}else if(ch1.speed==e1.speed) {
					int judge=(int)(Math.random()*2);
					if(judge==1) {
						System.out.print(ch1.name+"は"+Character.skill[skill]+"を使った！");
						switch(skill) {
						case 0:
							AttackC.LifeAttack(ch1,e1,0);
							break;
						case 1:
							AttackC.LifeAttack(ch1,e1,1);
							break;
						case 2:
							int num =(int)(Math.random()*2);
							AttackC.AbilityUp(ch1,num);
							break;
						case 3:
							int num2 =(int)(Math.random()*2);
							AttackC.AbilityDown(e1,num2);
							break;
						}
						int eskill=(int)(Math.random()*4);
						System.out.print("敵は"+Enemy.skill[eskill]+"を使った！");
						switch(eskill) {
						case 0:
							AttackE.LifeAttack(e1,ch1,0);
							break;
						case 1:
							AttackE.LifeAttack(e1,ch1,1);
							break;
						case 2:
							int num =(int)(Math.random()*2);
							AttackE.AbilityUp(e1,num);
							break;
						case 3:
							int num2 =(int)(Math.random()*2);
							AttackE.AbilityDown(ch1,num2);
							break;
						}
						
					}else {
						int eskill=(int)(Math.random()*4);
						System.out.print("敵は"+Enemy.skill[eskill]+"を使った！");
						switch(eskill) {
						case 0:
							AttackE.LifeAttack(e1,ch1,0);
							break;
						case 1:
							AttackE.LifeAttack(e1,ch1,1);
							break;
						case 2:
							int num =(int)(Math.random()*2);
							AttackE.AbilityUp(e1,num);
							break;
						case 3:
							int num2 =(int)(Math.random()*2);
							AttackE.AbilityDown(ch1,num2);
							break;
						}
						System.out.print(ch1.name+"は"+Character.skill[skill]+"を使った！");
						switch(skill) {
						case 0:
							AttackC.LifeAttack(ch1,e1,0);
							break;
						case 1:
							AttackC.LifeAttack(ch1,e1,1);
							break;
						case 2:
							int num =(int)(Math.random()*2);
							AttackC.AbilityUp(ch1,num);
							break;
						case 3:
							int num2 =(int)(Math.random()*2);
							AttackC.AbilityDown(e1,num2);
							break;
						}
					}
					

				}else {
					int eskill=(int)(Math.random()*4);
					System.out.print("敵は"+Enemy.skill[eskill]+"を使った！");
					switch(eskill) {
					case 0:
						AttackE.LifeAttack(e1,ch1,0);
						break;
					case 1:
						AttackE.LifeAttack(e1,ch1,1);
						break;
					case 2:
						int num =(int)(Math.random()*2);
						AttackE.AbilityUp(e1,num);
						break;
					case 3:
						int num2 =(int)(Math.random()*2);
						AttackE.AbilityDown(ch1,num2);
						break;
					}
					System.out.print(ch1.name+"は"+Character.skill[skill]+"を使った！");
					switch(skill) {
					case 0:
						AttackC.LifeAttack(ch1,e1,0);
						break;
					case 1:
						AttackC.LifeAttack(ch1,e1,1);
						break;
					case 2:
						int num =(int)(Math.random()*2);
						AttackC.AbilityUp(ch1,num);
						break;
					case 3:
						int num2 =(int)(Math.random()*2);
						AttackC.AbilityDown(e1,num2);
						break;
					}
					
				}
				if((ch1.life>0)&&(e1.life>0)) {
				System.out.println(ch1.name+"の残り体力:"+ch1.life);
				System.out.println("敵の残り体力:"+e1.life);
				}else if(ch1.life<0){
					System.out.println(ch1.name+"の残り体力:0");
					System.out.println("敵の残り体力:"+e1.life);
				}else if(e1.life<0) {
					System.out.println(ch1.name+"の残り体力:"+ch1.life);
					System.out.println("敵の残り体力:0");
				}
			}
			System.out.println("バトルが終了しました。");
			if(ch1.power>Monster.LOWER_LIMIT) {
				System.out.println("モンスターの勝利!!");
			}else if(e1.power>Monster.LOWER_LIMIT) {
				System.out.println("モンスターは敗北しました....");
			}else {
				System.out.println("引き分けです。");
			}

		}catch(Exception e) {
			System.out.println("エラーが発生しました");

	}
	}
}
