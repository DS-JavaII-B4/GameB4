
class Life{
	int life;//体力
	final static int maxLife=1000;//上限値と下限値の設定（数値は適当）
	final static int minLife=0;
	final static int defaultLife=100;
	//コンストラクタ(引数なし）
	Life(){
		life = defaultLife;
	}
	//コンストラクタ（引数あり）
	Life(int life)throws Exception {
		if(minLife<life||life<maxLife) {
			throw new Exception();
		}
		this.life=life;
	}
}
class Power{
	int power;//攻撃力
	final static int maxPower=500;
	final static int minPower=0;
	final static int defaultPower=100;
	//コンストラクタ（引数なし）
	Power(){
		power=defaultPower;
	}
	//コンストラクタ（引数あり）
	Power(int power)throws Exception{
		if(minPower<power||power<maxPower){
			throw new Exception();
		}
		this.power=power;

	}
}
class Speed{
	int speed;//素早さ
	final static int maxSpeed=500;
	final static int minSpeed=0;
	final static int defaultSpeed=100;
	//コンストラクタ（引数なし）
	Speed(){
		speed=defaultSpeed;
	}
	//コンストラクタ（引数あり）
	Speed(int speed)throws Exception{
		if(minSpeed<speed||speed<maxSpeed) {
			throw new Exception();
		}
		this.speed=speed;
	}
}
class Toughness{
	int toughness;//防御力
	final static int maxToughness=500;
	final static int minToughness=0;
	final static int defaultToughness=100;
	//コンストラクタ（引数なし）
	Toughness(int toughness)throws Exception{
		if(minToughness<toughness||toughness<maxToughness) {
			throw new Exception();
		}
		this.toughness=toughness;
	}
}
class Monster{
	final static int UPPER_LIMIT=1000;//能力の上限
	final static int LOWER_LIMIT=0;//能力の下限
	int life, power, speed, toughness;//各能力

	Monster(int life, int power, int speed, int toughness) {
		SetAbility(life, power, speed, toughness);
	}
	
	void SetAbility(int life,int power,int speed,int toughness){
		if((UPPER_LIMIT<life||life<LOWER_LIMIT)||(UPPER_LIMIT<power||LOWER_LIMIT>power)
			||(UPPER_LIMIT<speed||LOWER_LIMIT>speed)||(UPPER_LIMIT<toughness||LOWER_LIMIT>toughness)) {
			throw new Exception();
			} 
		this.life = life;
		this.power=power;
		this.speed=speed;
		this.toughness=toughness;
		}
	}
}
/*自分のモンスター*/
class Character extends Monster{
	String name;//名前
	String type;//属性
	String[] skill = new String[4];//技
	double[] skillPoint = new double[2];//攻撃力にかかる倍率
	final static String[] TYPE= {"ほのお","みず","くさ","ノーマル"};//4つの属性
	final static String DEAFAULT_TIPE = "ノーマル";
	Character(String name, String type, int life, int power, int speed, int toughness){
		super(life, power, speed, toughness);
		this.name=name;
		this.type=type;
	}

}
/*敵のモンスター*/
class Enemy extends Monster{
	Enemy(){
		super(100,100,100,100)
		name="enemy";
		type="ノーマル";
		}
	}
}
class Attack{
	void LifeAttack(Character m1,Character m2,int n) {
		if(((m1.type == "ほのお") && (m2.type == "くさ")) || ((m1.type == "くさ") && (m2.type == "みず"))　
				|| ((m1.type == "みず") && (m2.type == "ほのお"))) {
			m2.life = m2.life - (int)((double)(m1.power)*m1.skillPoint[n])*2;
		} else if(((m1.type == "くさ") && (m2.type == "ほのお")) || ((m1.type == "みず") && (m2.type == "くさ"))　
				|| ((m1.type == "ほのお") && (m2.type == "みず"))){
			m2.life = m2.life - (int)((double)(m1.power)*m1.skillPoint[n])/2;	
		} else {
			m2.life = m2.life - (int)((double)(m1.power)*m1.skillPoint[n]);	
		} 
	}
	void AbilityUp(Character m1, int n){
		if(n = 0){
		m1.power = m1.power + 5;
		} else if(n = 1){
		m1.speed = m1.speed +5;
		} else if(n = 2){
		m1.toughness = m1.toughness + 5;
		}
	}
	void AbilityDown(){
		if(n = 0){
			m1.power = m1.power - 5;
		} else if(n = 1){
			m1.speed = m1.speed - 5;
		} else if(n = 2){
			m1.toughness = m1.toughness - 5;
		}
	}
	
	
}
public class MonsterBattle {
	public static void main (String[] args) {
		try {

		}catch(Exception e) {

	}
}
